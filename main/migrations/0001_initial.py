# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
import main.fields
import django_localflavor_au.models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(verbose_name='last login', null=True, blank=True)),
                ('is_superuser', models.BooleanField(verbose_name='superuser status', help_text='Designates that this user has all permissions without explicitly assigning them.', default=False)),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('middle_name', models.CharField(max_length=30, verbose_name='middle name(s)', blank=True)),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('username', models.CharField(max_length=30, editable=False, default='')),
                ('email', models.EmailField(unique=True, max_length=254, error_messages={'unique': 'A user with that email already exists.'}, verbose_name='email address')),
                ('is_staff', models.BooleanField(verbose_name='staff status', help_text='Designates whether the user can log into this admin site.', default=False)),
                ('is_active', models.BooleanField(verbose_name='active', help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', default=True)),
                ('date_joined', models.DateTimeField(verbose_name='date joined', default=django.utils.timezone.now)),
                ('prepopulated', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(verbose_name='groups', blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_query_name='user', to='auth.Group', related_name='user_set')),
                ('user_permissions', models.ManyToManyField(verbose_name='user permissions', blank=True, help_text='Specific permissions for this user.', related_query_name='user', to='auth.Permission', related_name='user_set')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Advisor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_accepted', models.BooleanField(editable=False, default=False)),
                ('confirmation_key', models.CharField(max_length=36, editable=False, null=True, blank=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('date_of_birth', models.DateField(verbose_name='Date of birth', null=True)),
                ('gender', models.CharField(max_length=20, choices=[('Male', 'Male'), ('Female', 'Female')], default='Male')),
                ('address_line_1', models.CharField(max_length=255, default='')),
                ('address_line_2', models.CharField(max_length=255, null=True, blank=True)),
                ('city', models.CharField(max_length=255, verbose_name='City/Town', default='')),
                ('state', django_localflavor_au.models.AUStateField(max_length=3, choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')], default='QLD')),
                ('post_code', django_localflavor_au.models.AUPostCodeField(max_length=4, null=True)),
                ('phone_number', django_localflavor_au.models.AUPhoneNumberField(max_length=10, null=True)),
                ('security_question_1', models.CharField(max_length=255, choices=[('What was the name of your primary school?', 'What was the name of your primary school?'), ("What is your mother's maiden name?", "What is your mother's maiden name?"), ('What was the name of your first pet?', 'What was the name of your first pet?')], default='')),
                ('security_question_2', models.CharField(max_length=255, choices=[('What was your first car?', 'What was your first car?'), ('What was your favourite subject at school?', 'What was your favourite subject at school?'), ('In what month was your father born?', 'In what month was your father born?')], default='')),
                ('security_answer_1', models.CharField(max_length=255, verbose_name='Answer', default='')),
                ('security_answer_2', models.CharField(max_length=255, verbose_name='Answer', default='')),
                ('medicare_number', models.CharField(max_length=50, default='')),
                ('token', models.CharField(max_length=36, editable=False, null=True)),
                ('letter_of_authority', models.FileField(upload_to='')),
                ('work_phone', django_localflavor_au.models.AUPhoneNumberField(max_length=10, null=True)),
                ('betasmartz_agreement', models.BooleanField()),
                ('last_action', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetClass',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Invalid character only accept (0-9a-zA-Z_) ', regex='^[0-9a-zA-Z_]+$')], db_index=True)),
                ('display_order', models.PositiveIntegerField(db_index=True)),
                ('primary_color', main.fields.ColorField(max_length=10)),
                ('foreground_color', main.fields.ColorField(max_length=10)),
                ('drift_color', main.fields.ColorField(max_length=10)),
                ('asset_class_explanation', models.TextField(default='', blank=True)),
                ('tickers_explanation', models.TextField(default='', blank=True)),
                ('display_name', models.CharField(max_length=255, db_index=True)),
                ('investment_type', models.CharField(max_length=255, choices=[('BONDS', 'BONDS'), ('STOCKS', 'STOCKS'), ('MIXED', 'MIXED')])),
                ('super_asset_class', models.CharField(max_length=255, choices=[('EQUITY_AU', 'EQUITY_AU'), ('EQUITY_US', 'EQUITY_US'), ('EQUITY_EU', 'EQUITY_EU'), ('EQUITY_EM', 'EQUITY_EM'), ('EQUITY_INT', 'EQUITY_INT'), ('EQUITY_UK', 'EQUITY_UK'), ('EQUITY_JAPAN', 'EQUITY_JAPAN'), ('EQUITY_AS', 'EQUITY_AS'), ('EQUITY_CN', 'EQUITY_CN'), ('FIXED_INCOME_AU', 'FIXED_INCOME_AU'), ('FIXED_INCOME_US', 'FIXED_INCOME_US'), ('FIXED_INCOME_EU', 'FIXED_INCOME_EU'), ('FIXED_INCOME_EM', 'FIXED_INCOME_EM'), ('FIXED_INCOME_INT', 'FIXED_INCOME_INT'), ('FIXED_INCOME_UK', 'FIXED_INCOME_UK'), ('FIXED_INCOME_JAPAN', 'FIXED_INCOME_JAPAN'), ('FIXED_INCOME_AS', 'FIXED_INCOME_AS'), ('FIXED_INCOME_CN', 'FIXED_INCOME_CN')])),
            ],
        ),
        migrations.CreateModel(
            name='AssetFeature',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=127, help_text="This should be a noun such as 'Region'.")),
                ('description', models.TextField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetFeatureValue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=127, help_text='This should be an adjective.')),
                ('description', models.TextField(null=True, help_text='A clarification of what this value means.', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetFee',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=127)),
                ('applied_per', models.IntegerField(choices=[(0, 'Day End'), (1, 'Complete Day'), (2, 'Month End'), (3, 'Complete Month'), (4, 'Fiscal Month End'), (5, 'Entry Order'), (6, 'Entry Order Item'), (7, 'Exit Order'), (8, 'Exit Order Item'), (9, 'Transaction')])),
                ('fixed_level_unit', models.IntegerField(choices=[(0, 'Asset Value'), (1, 'Asset Qty'), (2, 'NAV Performance')])),
                ('fixed_level_type', models.IntegerField(choices=[(0, 'Add'), (1, 'Replace')])),
                ('fixed_levels', models.TextField(help_text="List of level transition points and the new values after that transition. Eg. '0: 0.001, 10000: 0.0'")),
                ('prop_level_unit', models.IntegerField(choices=[(0, 'Asset Value'), (1, 'Asset Qty'), (2, 'NAV Performance')])),
                ('prop_apply_unit', models.IntegerField(choices=[(0, 'Asset Value'), (1, 'Asset Qty'), (2, 'NAV Performance')])),
                ('prop_level_type', models.IntegerField(choices=[(0, 'Add'), (1, 'Replace')])),
                ('prop_levels', models.TextField(help_text="List of level transition points and the new values after that transition. Eg. '0: 0.001, 10000: 0.0'")),
            ],
        ),
        migrations.CreateModel(
            name='AssetFeePlan',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=127)),
                ('description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuthorisedRepresentative',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_accepted', models.BooleanField(editable=False, default=False)),
                ('confirmation_key', models.CharField(max_length=36, editable=False, null=True, blank=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('date_of_birth', models.DateField(verbose_name='Date of birth', null=True)),
                ('gender', models.CharField(max_length=20, choices=[('Male', 'Male'), ('Female', 'Female')], default='Male')),
                ('address_line_1', models.CharField(max_length=255, default='')),
                ('address_line_2', models.CharField(max_length=255, null=True, blank=True)),
                ('city', models.CharField(max_length=255, verbose_name='City/Town', default='')),
                ('state', django_localflavor_au.models.AUStateField(max_length=3, choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')], default='QLD')),
                ('post_code', django_localflavor_au.models.AUPostCodeField(max_length=4, null=True)),
                ('phone_number', django_localflavor_au.models.AUPhoneNumberField(max_length=10, null=True)),
                ('security_question_1', models.CharField(max_length=255, choices=[('What was the name of your primary school?', 'What was the name of your primary school?'), ("What is your mother's maiden name?", "What is your mother's maiden name?"), ('What was the name of your first pet?', 'What was the name of your first pet?')], default='')),
                ('security_question_2', models.CharField(max_length=255, choices=[('What was your first car?', 'What was your first car?'), ('What was your favourite subject at school?', 'What was your favourite subject at school?'), ('In what month was your father born?', 'In what month was your father born?')], default='')),
                ('security_answer_1', models.CharField(max_length=255, verbose_name='Answer', default='')),
                ('security_answer_2', models.CharField(max_length=255, verbose_name='Answer', default='')),
                ('medicare_number', models.CharField(max_length=50, default='')),
                ('letter_of_authority', models.FileField(upload_to='')),
                ('betasmartz_agreement', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AutomaticDeposit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('frequency', models.CharField(max_length=50, choices=[('MONTHLY', '1/mo'), ('TWICE_A_MONTH', '2/mo'), ('EVERY_OTHER_WEEK', '2/mo'), ('WEEKLY', 'WEEKLY')])),
                ('enabled', models.BooleanField(default=True)),
                ('amount', models.FloatField()),
                ('transaction_date_time_1', models.DateTimeField(null=True)),
                ('transaction_date_time_2', models.DateTimeField(null=True)),
                ('last_plan_change', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AutomaticWithdrawal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('frequency', models.CharField(max_length=50, choices=[('MONTHLY', '1/mo'), ('TWICE_A_MONTH', '2/mo'), ('EVERY_OTHER_WEEK', '2/mo'), ('WEEKLY', 'WEEKLY')])),
                ('enabled', models.BooleanField(default=True)),
                ('amount', models.FloatField()),
                ('transaction_date_time_1', models.DateTimeField(null=True)),
                ('transaction_date_time_2', models.DateTimeField(null=True)),
                ('last_plan_change', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_accepted', models.BooleanField(editable=False, default=False)),
                ('confirmation_key', models.CharField(max_length=36, editable=False, null=True, blank=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('date_of_birth', models.DateField(verbose_name='Date of birth', null=True)),
                ('gender', models.CharField(max_length=20, choices=[('Male', 'Male'), ('Female', 'Female')], default='Male')),
                ('address_line_1', models.CharField(max_length=255, default='')),
                ('address_line_2', models.CharField(max_length=255, null=True, blank=True)),
                ('city', models.CharField(max_length=255, verbose_name='City/Town', default='')),
                ('state', django_localflavor_au.models.AUStateField(max_length=3, choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')], default='QLD')),
                ('post_code', django_localflavor_au.models.AUPostCodeField(max_length=4, null=True)),
                ('phone_number', django_localflavor_au.models.AUPhoneNumberField(max_length=10, null=True)),
                ('security_question_1', models.CharField(max_length=255, choices=[('What was the name of your primary school?', 'What was the name of your primary school?'), ("What is your mother's maiden name?", "What is your mother's maiden name?"), ('What was the name of your first pet?', 'What was the name of your first pet?')], default='')),
                ('security_question_2', models.CharField(max_length=255, choices=[('What was your first car?', 'What was your first car?'), ('What was your favourite subject at school?', 'What was your favourite subject at school?'), ('In what month was your father born?', 'In what month was your father born?')], default='')),
                ('security_answer_1', models.CharField(max_length=255, verbose_name='Answer', default='')),
                ('security_answer_2', models.CharField(max_length=255, verbose_name='Answer', default='')),
                ('medicare_number', models.CharField(max_length=50, default='')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('client_agreement', models.FileField(upload_to='')),
                ('tax_file_number', models.CharField(max_length=9, null=True, blank=True)),
                ('provide_tfn', models.IntegerField(choices=[(0, 'Yes'), (1, 'I am a non-resident of Australia'), (2, 'I want to claim an exemption'), (3, 'I do not want to quote a Tax File Number or exemption')], verbose_name='Provide TFN?', default=0)),
                ('associated_to_broker_dealer', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], verbose_name='Are employed by or associated with a broker dealer?', default=False)),
                ('ten_percent_insider', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], verbose_name='Are you a 10% shareholder, director, or policy maker of a publicly traded company?', default=False)),
                ('public_position_insider', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], verbose_name='Do you or a family member hold a public office position?', default=False)),
                ('us_citizen', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], verbose_name='Are you a US citizen/person for the purpose of US Federal Income Tax?', default=False)),
                ('employment_status', models.IntegerField(choices=[(0, 'Employed (full-time)'), (1, 'Employed (part-time)'), (1, 'Self-employed'), (2, 'Student'), (3, 'Retired'), (4, 'Homemaker'), (5, 'Not employed')])),
                ('net_worth', models.FloatField(verbose_name='Net worth ($)', default=0)),
                ('income', models.FloatField(verbose_name='Income ($)', default=0)),
                ('occupation', models.CharField(max_length=255, null=True, blank=True)),
                ('employer', models.CharField(max_length=255, null=True, blank=True)),
                ('betasmartz_agreement', models.BooleanField(default=False)),
                ('advisor_agreement', models.BooleanField(default=False)),
                ('last_action', models.DateTimeField(null=True)),
                ('advisor', models.ForeignKey(related_name='all_clients', to='main.Advisor')),
                ('secondary_advisors', models.ManyToManyField(editable=False, to='main.Advisor', related_name='secondary_clients')),
                ('user', models.OneToOneField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClientAccount',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('custom_fee', models.PositiveIntegerField(default=0)),
                ('account_type', models.IntegerField(choices=[(0, 'Personal Account'), (1, 'Joint Account'), (2, 'Trust Account'), (3, 'Self Managed Superannuation Fund'), (4, 'Corporate Account')])),
                ('account_name', models.CharField(max_length=255, default='PERSONAL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('token', models.CharField(max_length=36, editable=False)),
                ('confirmed', models.BooleanField(default=False)),
                ('tax_loss_harvesting_consent', models.BooleanField(default=False)),
                ('tax_loss_harvesting_status', models.CharField(max_length=255, choices=[('USER_OFF', 'USER_OFF'), ('USER_ON', 'USER_ON')], default='USER_OFF')),
                ('account_group', models.ForeignKey(null=True, to='main.AccountGroup', related_name='accounts_all')),
                ('asset_fee_plan', models.ForeignKey(null=True, to='main.AssetFeePlan')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=127)),
            ],
        ),
        migrations.CreateModel(
            name='CostOfLivingIndex',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('state', django_localflavor_au.models.AUStateField(unique=True, max_length=3, choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')])),
                ('value', models.FloatField(default=80.99)),
            ],
        ),
        migrations.CreateModel(
            name='DailyPrice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField()),
                ('nav', models.FloatField(null=True)),
                ('aum', models.BigIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataApiDict',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('api', models.CharField(max_length=50, choices=[('YAHOO', 'YAHOO'), ('GOOGLE', 'GOOGLE')])),
                ('platform_symbol', models.CharField(max_length=20)),
                ('api_symbol', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Dividend',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('record_date', models.DateTimeField()),
                ('amount', models.FloatField(help_text='Amount of the dividend in system currency', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('franking', models.FloatField(help_text='Franking percent. 0.01 = 1% of the dividend was franked.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='EmailInvitation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('email', models.EmailField(max_length=254)),
                ('inviter_id', models.PositiveIntegerField()),
                ('send_date', models.DateTimeField(auto_now=True)),
                ('send_count', models.PositiveIntegerField(default=0)),
                ('status', models.PositiveIntegerField(choices=[(0, 'Pending'), (1, 'Submitted'), (3, 'Active'), (4, 'Closed')], default=0)),
                ('invitation_type', models.PositiveIntegerField(choices=[(0, 'Advisor'), (1, 'Authorised representative'), (2, 'Supervisor'), (3, 'Client')], default=3)),
                ('inviter_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('first', models.CharField(max_length=3)),
                ('second', models.CharField(max_length=3)),
                ('date', models.DateField()),
                ('rate', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='FinancialPlan',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('other_retirement_income_cents', models.FloatField(default=0)),
                ('complete', models.BooleanField(default=False)),
                ('retirement_zip', django_localflavor_au.models.AUPostCodeField(max_length=4)),
                ('income_replacement_ratio', models.FloatField(null=True)),
                ('retirement_age', models.PositiveIntegerField(null=True)),
                ('spouse_retirement_age', models.PositiveIntegerField(null=True)),
                ('desired_retirement_income_cents', models.FloatField(default=0)),
                ('savings_advice_chance', models.CharField(max_length=100, null=True)),
                ('client', models.OneToOneField(to='main.Client', related_name='financial_plan')),
            ],
        ),
        migrations.CreateModel(
            name='FinancialPlanAccount',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('annual_contribution_cents', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FinancialPlanExternalAccount',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('account_type', models.CharField(max_length=100)),
                ('balance_cents', models.FloatField(null=True, default=0)),
                ('annual_contribution_cents', models.FloatField(null=True, default=0)),
                ('account_owner', models.CharField(max_length=100, null=True)),
                ('institution_name', models.CharField(max_length=255, null=True)),
                ('investment_type', models.CharField(max_length=100, null=True)),
                ('advisor_fee_percent', models.CharField(max_length=100, null=True)),
                ('client', models.ForeignKey(related_name='financial_plan_external_accounts', to='main.Client')),
            ],
        ),
        migrations.CreateModel(
            name='FinancialProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('complete', models.BooleanField(default=False)),
                ('marital_status', models.CharField(max_length=100, default='single')),
                ('retired', models.BooleanField(default=False)),
                ('life_expectancy', models.FloatField(null=True, default=70)),
                ('pretax_income_cents', models.FloatField(null=True, default=0)),
                ('social_security_monthly_amount_cents', models.FloatField(null=True, default=0)),
                ('expected_inflation', models.FloatField(default=2.5)),
                ('social_security_percent_expected', models.FloatField(null=True, default=0)),
                ('annual_salary_percent_growth', models.FloatField(null=True, default=0)),
                ('average_tax_percent', models.FloatField(null=True, default=0)),
                ('spouse_name', models.CharField(max_length=100, null=True)),
                ('spouse_estimated_birthdate', models.DateTimeField(null=True)),
                ('spouse_retired', models.BooleanField(default=False)),
                ('spouse_life_expectancy', models.FloatField(null=True, default=80)),
                ('spouse_pretax_income_cents', models.FloatField(null=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.OneToOneField(to='main.Client', related_name='financial_profile')),
            ],
        ),
        migrations.CreateModel(
            name='Firm',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('dealer_group_number', models.CharField(max_length=50, null=True, blank=True)),
                ('slug', models.CharField(unique=True, max_length=100, editable=False)),
                ('logo_url', models.ImageField(upload_to='', verbose_name='White logo', null=True, blank=True)),
                ('knocked_out_logo_url', models.ImageField(upload_to='', verbose_name='Colored logo', null=True, blank=True)),
                ('client_agreement_url', models.FileField(upload_to='', verbose_name='Client Agreement (PDF)', null=True, blank=True)),
                ('form_adv_part2_url', models.FileField(upload_to='', verbose_name='Form Adv', null=True, blank=True)),
                ('token', models.CharField(max_length=36, editable=False)),
                ('fee', models.PositiveIntegerField(default=0)),
                ('can_use_ethical_portfolio', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='FirmData',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('afsl_asic', models.CharField(max_length=50, verbose_name='AFSL/ASIC number')),
                ('afsl_asic_document', models.FileField(verbose_name='AFSL/ASIC doc.', upload_to='')),
                ('office_address_line_1', models.CharField(max_length=255, verbose_name='Office address 1')),
                ('office_address_line_2', models.CharField(max_length=255, verbose_name='Office address 2', null=True, blank=True)),
                ('office_state', django_localflavor_au.models.AUStateField(max_length=3, choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')])),
                ('office_city', models.CharField(max_length=255)),
                ('office_post_code', django_localflavor_au.models.AUPostCodeField(max_length=4)),
                ('postal_address_line_1', models.CharField(max_length=255, verbose_name='Postal address 1')),
                ('postal_address_line_2', models.CharField(max_length=255, verbose_name='Postal address 2', null=True, blank=True)),
                ('postal_state', django_localflavor_au.models.AUStateField(max_length=3, choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')])),
                ('same_address', models.BooleanField(default=False)),
                ('postal_city', models.CharField(max_length=255)),
                ('postal_post_code', django_localflavor_au.models.AUPostCodeField(max_length=4)),
                ('daytime_phone_number', django_localflavor_au.models.AUPhoneNumberField(max_length=10)),
                ('mobile_phone_number', django_localflavor_au.models.AUPhoneNumberField(max_length=10)),
                ('fax_number', django_localflavor_au.models.AUPhoneNumberField(max_length=10)),
                ('alternate_email_address', models.EmailField(max_length=254, verbose_name='Email address', null=True, blank=True)),
                ('last_change', models.DateField(auto_now=True)),
                ('fee_bank_account_name', models.CharField(max_length=100, verbose_name='Name')),
                ('fee_bank_account_branch_name', models.CharField(max_length=100, verbose_name='Branch name')),
                ('fee_bank_account_bsb_number', models.CharField(max_length=20, verbose_name='BSB number')),
                ('fee_bank_account_number', models.CharField(max_length=20, verbose_name='Account number')),
                ('fee_bank_account_holder_name', models.CharField(max_length=100, verbose_name='Account holder')),
                ('australian_business_number', models.CharField(max_length=20, verbose_name='ABN')),
                ('firm', models.OneToOneField(to='main.Firm', related_name='firm_details')),
            ],
            options={
                'verbose_name': 'Firm detail',
            },
        ),
        migrations.CreateModel(
            name='FiscalYear',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=127)),
                ('year', models.IntegerField()),
                ('begin_date', models.DateField(help_text='Inclusive begin date for this fiscal year')),
                ('end_date', models.DateField(help_text='Inclusive end date for this fiscal year')),
                ('month_ends', models.CommaSeparatedIntegerField(max_length=35, help_text='Comma separated month end days each month of the year. First element is January.', validators=[django.core.validators.MinLengthValidator(23)])),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('archived', models.BooleanField(help_text='An archived goal is "deleted"', default=False)),
                ('account', models.ForeignKey(related_name='all_goals', to='main.ClientAccount')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GoalMetric',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.IntegerField(choices=[(0, 'Portfolio Mix'), (1, 'RiskScore')])),
                ('comparison', models.IntegerField(choices=[(0, 'Minimum'), (1, 'Exactly'), (2, 'Maximum')], default=1)),
                ('rebalance_type', models.IntegerField(choices=[(0, 'Absolute'), (1, 'Relative')], help_text='Is the rebalance threshold an absolute threshold or relative (percentage difference) threshold?')),
                ('rebalance_thr', models.FloatField(help_text='The difference between configured and measured value at which a rebalance will be recommended.')),
                ('configured_val', models.FloatField(help_text='The value of the metric that was configured.')),
                ('measured_val', models.FloatField(null=True, help_text='The latest measured value of the metric')),
                ('feature', models.ForeignKey(null=True, to='main.AssetFeatureValue')),
                ('goal', models.ForeignKey(related_name='metrics', to='main.Goal')),
            ],
        ),
        migrations.CreateModel(
            name='GoalSetting',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('target', models.FloatField(default=0)),
                ('completion', models.DateField(help_text='The scheduled completion date for the goal.')),
                ('hedge_fx', models.BooleanField(help_text='Do we want to hedge foreign exposure?')),
                ('auto_deposit', models.OneToOneField(null=True, to='main.AutomaticDeposit')),
            ],
        ),
        migrations.CreateModel(
            name='GoalTypes',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, db_index=True)),
                ('default_term', models.IntegerField()),
                ('group', models.CharField(max_length=255, null=True)),
                ('risk_sensitivity', models.FloatField(help_text='Default risk sensitivity for this goal type. 0 = not sensitive, 10 = Very sensitive (No risk tolerated)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
            ],
            options={
                'db_table': 'goal_types',
            },
        ),
        migrations.CreateModel(
            name='MarketCap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='MarkowitzScale',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField(unique=True)),
                ('min', models.FloatField()),
                ('max', models.FloatField()),
                ('a', models.FloatField(null=True)),
                ('b', models.FloatField(null=True)),
                ('c', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyPrices',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('symbol', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('price', models.FloatField(default=0)),
            ],
            options={
                'ordering': ['symbol', 'date'],
            },
        ),
        migrations.CreateModel(
            name='Performer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('symbol', models.CharField(max_length=20, null=True, blank=True)),
                ('name', models.CharField(max_length=100)),
                ('group', models.CharField(max_length=20, choices=[('STRATEGY', 'STRATEGY'), ('BENCHMARK', 'BENCHMARK'), ('BOND', 'BOND'), ('STOCK', 'STOCK')], default='BENCHMARK')),
                ('allocation', models.FloatField(default=0)),
                ('portfolio_set', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('fee', models.PositiveIntegerField(default=0)),
                ('api', models.CharField(max_length=20, choices=[('YAHOO', 'YAHOO'), ('GOOGLE', 'GOOGLE')], default='YAHOO')),
            ],
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('variance', models.FloatField()),
                ('er', models.FloatField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PortfolioItem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('weight', models.FloatField()),
                ('volatility', models.FloatField(help_text='variance of this asset a the time of setting this portfolio.')),
            ],
        ),
        migrations.CreateModel(
            name='PortfolioSet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=100)),
                ('risk_free_rate', models.FloatField()),
                ('tau', models.FloatField()),
                ('default_region_sizes', models.TextField(default='{}')),
                ('portfolios', models.TextField(editable=False, null=True, blank=True)),
                ('default_picked_regions', models.TextField(null=True)),
                ('optimization_mode', models.IntegerField(choices=[(1, 'auto mode'), (2, 'weight mode')], default=2)),
                ('asset_classes', models.ManyToManyField(to='main.AssetClass', related_name='portfolio_sets')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('share', models.FloatField(default=0)),
                ('goal', models.ForeignKey(related_name='positions', to='main.Goal')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=127, help_text='Name of the region')),
                ('description', models.TextField(default='', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Supervisor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('can_write', models.BooleanField(verbose_name='Has Full Access?', help_text="A supervisor with 'full access' can impersonate advisors and clients and make any action as them.", default=False)),
                ('firm', models.ForeignKey(related_name='supervisors', to='main.Firm')),
                ('user', models.OneToOneField(to=settings.AUTH_USER_MODEL, related_name='supervisor')),
            ],
        ),
        migrations.CreateModel(
            name='SymbolReturnHistory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('return_number', models.FloatField(default=0)),
                ('symbol', models.CharField(max_length=20)),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Ticker',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('symbol', models.CharField(unique=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid symbol format', regex='^[^ ]+$')])),
                ('display_name', models.CharField(max_length=255, db_index=True)),
                ('description', models.TextField(default='', blank=True)),
                ('ordering', models.IntegerField(db_index=True)),
                ('url', models.URLField()),
                ('unit_price', models.FloatField(default=10)),
                ('currency', models.CharField(max_length=10, default='AUD')),
                ('ethical', models.BooleanField(help_text='Is this an ethical instrument?', default=False)),
                ('etf', models.BooleanField(help_text='Is this an Exchange Traded Fund (True) or Mutual Fund (False)?', default=True)),
                ('data_api', models.CharField(max_length=30, choices=[('portfolios.api.bloomberg', 'Bloomberg')], null=True, help_text='The module that will be used to get the data for this ticker')),
                ('data_api_param', models.CharField(unique=True, max_length=30, null=True, help_text='Structured parameter string appropriate for the data api. The first component would probably be id appropriate for the given api')),
                ('asset_class', models.ForeignKey(related_name='tickers', to='main.AssetClass')),
                ('region', models.ForeignKey(to='main.Region')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.IntegerField(choices=[(0, 'ALLOCATION'), (1, 'DEPOSIT'), (2, 'WITHDRAWAL'), (3, 'REBALANCE'), (4, 'MARKET_CHANGE'), (5, 'FEE')])),
                ('amount', models.FloatField(default=0)),
                ('satelliteAlloc', models.FloatField(default=0)),
                ('status', models.CharField(max_length=20, choices=[('PENDING', 'PENDING'), ('EXECUTED', 'EXECUTED')], default='PENDING')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('executed_date', models.DateTimeField(null=True)),
                ('new_balance', models.FloatField(default=0)),
                ('inversion', models.FloatField(default=0)),
                ('return_fraction', models.FloatField(default=0)),
                ('account', models.ForeignKey(null=True, to='main.Goal', related_name='transactions')),
                ('from_account', models.ForeignKey(related_name='transactions_from', blank=True, null=True, to='main.Goal')),
                ('to_account', models.ForeignKey(related_name='transactions_to', blank=True, null=True, to='main.Goal')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionMemo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('category', models.CharField(max_length=255)),
                ('comment', models.TextField()),
                ('transaction_type', models.CharField(max_length=20)),
                ('transaction', models.ForeignKey(related_name='memos', to='main.Transaction')),
            ],
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('q', models.FloatField()),
                ('assets', models.TextField()),
                ('portfolio_set', models.ForeignKey(related_name='views', to='main.PortfolioSet')),
            ],
        ),
        migrations.AddField(
            model_name='position',
            name='ticker',
            field=models.ForeignKey(to='main.Ticker'),
        ),
        migrations.AddField(
            model_name='portfolioitem',
            name='asset',
            field=models.ForeignKey(to='main.Ticker'),
        ),
        migrations.AddField(
            model_name='portfolioitem',
            name='portfolio',
            field=models.ForeignKey(related_name='items', to='main.Portfolio'),
        ),
        migrations.AddField(
            model_name='platform',
            name='portfolio_set',
            field=models.ForeignKey(to='main.PortfolioSet'),
        ),
        migrations.AlterUniqueTogether(
            name='monthlyprices',
            unique_together=set([('symbol', 'date')]),
        ),
        migrations.AddField(
            model_name='marketcap',
            name='ticker',
            field=models.OneToOneField(to='main.Ticker', related_name='market_cap'),
        ),
        migrations.AddField(
            model_name='goalsetting',
            name='portfolio',
            field=models.OneToOneField(to='main.Portfolio', related_name='goal_setting'),
        ),
        migrations.AddField(
            model_name='goal',
            name='active_settings',
            field=models.OneToOneField(related_name='goal_active', null=True, help_text='The settings were last used to do a rebalance. These settings are responsible for our current market positions.', to='main.GoalSetting'),
        ),
        migrations.AddField(
            model_name='goal',
            name='approved_settings',
            field=models.OneToOneField(related_name='goal_approved', null=True, help_text='The settings that both the client and advisor have confirmed and will become active the next time the goal is rebalanced.', to='main.GoalSetting'),
        ),
        migrations.AddField(
            model_name='goal',
            name='portfolio_set',
            field=models.ForeignKey(help_text='The set of assets that may be used to create a portfolio for this goal.', to='main.PortfolioSet'),
        ),
        migrations.AddField(
            model_name='goal',
            name='selected_settings',
            field=models.OneToOneField(related_name='goal_selected', null=True, help_text='The settings that the client has confirmed, but are not yet approved by the advisor.', to='main.GoalSetting'),
        ),
        migrations.AddField(
            model_name='goal',
            name='type',
            field=models.ForeignKey(to='main.GoalTypes'),
        ),
        migrations.AddField(
            model_name='firm',
            name='default_portfolio_set',
            field=models.ForeignKey(to='main.PortfolioSet'),
        ),
        migrations.AddField(
            model_name='financialplanaccount',
            name='account',
            field=models.ForeignKey(to='main.Goal'),
        ),
        migrations.AddField(
            model_name='financialplanaccount',
            name='client',
            field=models.ForeignKey(related_name='financial_plan_accounts', to='main.Client'),
        ),
        migrations.AlterUniqueTogether(
            name='exchangerate',
            unique_together=set([('first', 'second', 'date')]),
        ),
        migrations.AddField(
            model_name='dividend',
            name='instrument',
            field=models.ForeignKey(to='main.Ticker'),
        ),
        migrations.AddField(
            model_name='dailyprice',
            name='ticker',
            field=models.ForeignKey(to='main.Ticker', db_index=False),
        ),
        migrations.AddField(
            model_name='company',
            name='fiscal_years',
            field=models.ManyToManyField(to='main.FiscalYear'),
        ),
        migrations.AddField(
            model_name='clientaccount',
            name='default_portfolio_set',
            field=models.ForeignKey(to='main.PortfolioSet'),
        ),
        migrations.AddField(
            model_name='clientaccount',
            name='primary_owner',
            field=models.ForeignKey(related_name='accounts_all', to='main.Client'),
        ),
        migrations.AddField(
            model_name='authorisedrepresentative',
            name='firm',
            field=models.ForeignKey(related_name='authorised_representatives', to='main.Firm'),
        ),
        migrations.AddField(
            model_name='authorisedrepresentative',
            name='user',
            field=models.OneToOneField(to=settings.AUTH_USER_MODEL, related_name='authorised_representative'),
        ),
        migrations.AddField(
            model_name='assetfee',
            name='asset',
            field=models.ForeignKey(to='main.Ticker'),
        ),
        migrations.AddField(
            model_name='assetfee',
            name='collector',
            field=models.ForeignKey(to='main.Company'),
        ),
        migrations.AddField(
            model_name='assetfee',
            name='plan',
            field=models.ForeignKey(to='main.AssetFeePlan'),
        ),
        migrations.AddField(
            model_name='assetfeaturevalue',
            name='assets',
            field=models.ManyToManyField(to='main.Ticker', related_name='features'),
        ),
        migrations.AddField(
            model_name='assetfeaturevalue',
            name='feature',
            field=models.ForeignKey(help_text='The asset feature this is one value for.', to='main.AssetFeature', related_name='values'),
        ),
        migrations.AddField(
            model_name='advisor',
            name='default_portfolio_set',
            field=models.ForeignKey(to='main.PortfolioSet'),
        ),
        migrations.AddField(
            model_name='advisor',
            name='firm',
            field=models.ForeignKey(related_name='advisors', to='main.Firm'),
        ),
        migrations.AddField(
            model_name='advisor',
            name='user',
            field=models.OneToOneField(to=settings.AUTH_USER_MODEL, related_name='advisor'),
        ),
        migrations.AddField(
            model_name='accountgroup',
            name='advisor',
            field=models.ForeignKey(related_name='primary_account_groups', to='main.Advisor'),
        ),
        migrations.AddField(
            model_name='accountgroup',
            name='secondary_advisors',
            field=models.ManyToManyField(to='main.Advisor', related_name='secondary_account_groups'),
        ),
        migrations.CreateModel(
            name='ProxyAssetClass',
            fields=[
            ],
            options={
                'verbose_name': 'Asset class',
                'verbose_name_plural': 'Asset classes',
                'proxy': True,
            },
            bases=('main.assetclass',),
        ),
        migrations.CreateModel(
            name='ProxyTicker',
            fields=[
            ],
            options={
                'verbose_name': 'Ticker',
                'verbose_name_plural': 'Tickers',
                'proxy': True,
            },
            bases=('main.ticker',),
        ),
        migrations.AlterUniqueTogether(
            name='position',
            unique_together=set([('goal', 'ticker')]),
        ),
        migrations.AlterUniqueTogether(
            name='dividend',
            unique_together=set([('instrument', 'record_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='dailyprice',
            unique_together=set([('ticker', 'date')]),
        ),
    ]
